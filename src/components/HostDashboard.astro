---

---

<h1>Host dashboard</h1>

<inputs-select></inputs-select>
<video-publisher auto-publish="false"></video-publisher>
<div id="container">
    <div id="hidden">hidden text</div>
</div>

<script>
    const inputsSelectEl= document.querySelector("inputs-select");
    const videoPublisherEl= document.querySelector("video-publisher");
    const sessionData = JSON.parse(sessionStorage.getItem("session"));
    console.log("sessionData: ", sessionData);
    // Initialize an OpenTok Session object
    const session = OT.initSession(sessionData.applicationId, sessionData.sessionId);
    console.log("session: ", session);

    // Example POST method implementation:
    async function postData(url = "", data = {}) {
        // Default options are marked with *
        const response = await fetch(url, {
            method: "POST", // *GET, POST, PUT, DELETE, etc.
            // mode: "cors", // no-cors, *cors, same-origin
            // cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
            // credentials: "same-origin", // include, *same-origin, omit
            headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            redirect: "follow", // manual, *follow, error
            referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            body: JSON.stringify(data), // body data type must match "Content-Type" header
        });
        return response.json(); // parses JSON response into native JavaScript objects
    }

    
    inputsSelectEl.addEventListener("inputsSelected", async (event)=> {
        console.log("event.detail: ", event.detail);
        const tokensData = await postData(`/.netlify/functions/generate_tokens`, {seesionId:sessionData.sessionId, role: "moderator"});
        // const tokensData = await tokensResponse.json();
        console.log("tokensData: ", tokensData);
        const { videoToken } = tokensData;
        session.connect(videoToken, (error) => {
            if (error){
                console.error(error.message)
            } else {
                console.log("session connected!", videoToken);
                videoPublisherEl.properties = {width: "400px", height: "400px", name: "alice", audioSource:event.detail.audioSource, videoSource:event.detail.videoSource};
                videoPublisherEl.session = session;
                videoPublisherEl.token = videoToken;
                videoPublisherEl.startPublish();
                videoPublisherEl.addEventListener("published",(event)=> {
                    console.log("published: ", event.detail);
                    // videoPublisherEl.setAttribute("id", `${event.detail.publisher.stream.streamId}`);
                    // toggleDisplayBtn.setAttribute("data-id", `${event.detail.publisher.stream.streamId}`);
                    // displayState = [...displayState, {id:event.detail.publisher.stream.streamId, display: 'false'}];
                    // console.log("publisher displayState: ",displayState);
                    // save to localStorage?
                    // saveToLocalStorage("displayState", displayState);

                });

            }
        });
    })
</script>

<style>
    #container {
        display: none;
    }
</style>